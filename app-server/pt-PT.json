{
  "apiTest": {
    "label.successExample": "Success Example",
    "testData": "Test Data"
  },
  "app": {
    "comma": ", ",
    "jenkins": "Jenkins",
    "slack": "Slack",
    "microsoftTeams": "Teams",
    "inbox": "Inbox",
    "success": "Sucesso",
    "error.dataFormatError.websiteHelp": "Erro de formato de dados, consulte a ajuda",
    "modified.successfully": "Modificado com sucesso",
    "reset.successfully": "Redefinido com sucesso",
    "webhook": "Webhook",
    "email": "E-mail",
    "endpoint": "API",
    "endpointCase": "API Case",
    "markdown": "Markdown",
    "schema": "Schema",
    "testScenario": "Test Scenario"
  },
  "appLink": {
    "apiInfoUrl": "{appWebEditionUrl}/link/project/{projectId}/apis/api-{id}?branchId={branchId}",
    "webSocketApiInfoUrl": "{appWebEditionUrl}/link/project/{projectId}/apis/websocket-{id}",
    "socketIOApiInfoUrl": "{appWebEditionUrl}/link/project/{projectId}/apis/socket-io-{id}",
    "docInfoUrl": "{appWebEditionUrl}/link/project/{projectId}/apis/doc-{id}?branchId={branchId}",
    "dataSchemaInfoUrl": "{appWebEditionUrl}/link/project/{projectId}/apis/schema-{id}?branchId={branchId}",
    "testReportInfoUrl": "{appWebEditionUrl}/link/project/{projectId}/api-test/test-report/{id}?branchId={branchId}",
    "commentInfoUrl": "{appWebEditionUrl}/link/project/{projectId}/{entityType}/{entityId}/comment/{id}?branchId={branchId}",
    "apiInfoUrl.main.branch": "{appWebEditionUrl}/link/project/{projectId}/apis/api-{id}",
    "docInfoUrl.main.branch": "{appWebEditionUrl}/link/project/{projectId}/apis/doc-{id}",
    "dataSchemaInfoUrl.main.branch": "{appWebEditionUrl}/link/project/{projectId}/apis/schema-{id}",
    "testReportInfoUrl.main.branch": "{appWebEditionUrl}/link/project/{projectId}/api-test/test-report/{id}"
  },
  "dataSchema": {
    "rootFolder": "Root"
  },
  "environment": {
    "visibility.forbidden": "Setting a mock environment to private is not allowed.",
    "visibility.privilege": "Only the administrator and environment creator can set the environment to private.",
    "envName.development": "Amb. de desenv.",
    "envName.test": "Amb. de testes",
    "envName.prod": "Amb. de prod.",
    "envName.mock": "Mock local",
    "envName.cloudMock": "Mock na nuvem",
    "envName.selfHostedMock": "Self-hosted Mock",
    "envName.serverMock": "Mock do servidor"
  },
  "folder": {
    "default": "Default Folder",
    "rootFolder": "Root"
  },
  "httpApi": {
    "unnamed": "Unnamed",
    "response.success": "Success",
    "parameters.example.length.tooLong": "Error: The length of the property 'example' is too long. The maximum length is 10MB.",
    "status.designing": "Designing",
    "status.pending": "Pending",
    "status.developing": "Developing",
    "status.integrating": "Integrating",
    "status.testing": "Testing",
    "status.tested": "Tested",
    "status.released": "Released",
    "status.deprecated": "Deprecated",
    "status.obsolete": "Obsolete",
    "status.exception": "Exception",
    "requestResult.sizeLimitTip": "This response body is too large to display. Please update the app to view.",
    "httpCode.shortName.200": "OK",
    "httpCode.shortName.201": "Created",
    "httpCode.shortName.202": "Accepted",
    "httpCode.shortName.204": "No Content",
    "httpCode.shortName.400": "Bad Request",
    "httpCode.shortName.401": "Unauthorized",
    "httpCode.shortName.403": "Forbidden",
    "httpCode.shortName.404": "Record Not Found",
    "httpCode.shortName.410": "Record Gone",
    "httpCode.shortName.422": "Parameter Error",
    "httpCode.shortName.500": "Server Error",
    "httpCode.shortName.502": "Bad Gateway",
    "httpCode.shortName.503": "Service Unavailable",
    "httpCode.shortName.504": "Gateway Timeout"
  },
  "importExport": {
    "error.partialFailed": "Partial API or data import failed",
    "autoImport.apiOverwriteMode.invalid": "The APl Override Method is not available for the import API, please re-select",
    "autoImport.schemaOverwriteMode.invalid": "The APl Override Method is not available for the import Schema, please re-select",
    "importing.tip": "Another user is currently performing import operations. Please retry later.",
    "export.htmlTitle": "API Documentation - {appName}",
    "httpApi.unnamed": "Unnamed",
    "customEndpoint.unnamed": "Unnamed",
    "folderId.notFound": "The target folder has been deleted and data cannot be imported. Please choose another folder."
  },
  "invitation": {
    "inviteText": "{inviter} has invited you to join a {resourceTypePlainText} {resourceValue} on {appName} {url}",
    "email.restricted": "This feature is restricted, please use the link invitation instead.",
    "team": "team",
    "Team": "Team",
    "project": "project",
    "Project": "Project",
    "invite-user.subject": "{inviter} has invited you to use {appName}",
    "inviteMember.email.subject": "{inviter} convidou você para participar de {resourceTypePlainText} {resourceValue} no {appName}",
    "organization": "organization",
    "Organization": "Organization"
  },
  "notice": {
    "user.earnCreditFromInvitation": "You earned {creditAmount} credit for inviting {inviteeName} to {appName}!",
    "user.contributeCreditToTeam": "You applied {creditAmount} credit to team {teamName}.",
    "user.creditWillExpiredNextMonth": "Your {creditAmount} credit will expire next month.",
    "team.userContributeCreditToTeam": "Team {teamName} get {creditAmount} in {appName} credit by {userName}.",
    "team.consumeCreditOnBuyPlan": "{planType} plan for team {teamName} consumed {creditAmount} credits.",
    "team.creditWillExpiredNextMonth": "The {creditAmount} credits of team {teamName} will expire next month.",
    "upgradeSubscriptionPlanReminder": "Upgrade subscription plan reminder",
    "earnCreditFromInvitingUserEmailTitle": "You just received {amount} in {appName} credit",
    "trialStartedReminderEmailTitle": "Start your Free 14-day trial in {appName} NOW!",
    "trialWillExpiredReminderEmailTitle": "Your 14-day Free Trial of {appName} Ending Soon",
    "trialExpiredReminderEmailTitle": "Your Free Trial of {appName} has Ended",
    "membersAccept": "New members accepted the invitation",
    "membersReject": "New members refused the invitation",
    "membersAccept.tips": "@{p0} accepted invitation to join the team \"{p1}\".",
    "membersReject.tips": "@{p0} refused to join the team \"{p1}\".",
    "projectMemberAccept.tips": "@{p0} accepted invitation to join the project \"{p1}\".",
    "projectMemberReject.tips": "@{p0} refused to join the project \"{p1}\".",
    "organizationMembersAccept.tips": "@{p0} accepted invitation to join the organization \"{p1}\".",
    "organizationMembersReject.tips": "@{p0} refused to join the organization \"{p1}\".",
    "membersRemove": "Notification of removal from team",
    "membersRemove.tips": "You have been moved out of the team \"{p0}\".",
    "inviteTeam": "@{p0} invites you to join the team \"{p1}\".",
    "inviteOrganization": "@{inviterName} invites you to join the organization \"{organizationName}\".",
    "organization.label.accept.message": "Join the organization successfully.",
    "organization.label.deny.message": "Are you sure you want to refuse the invitation to join the organization?",
    "inviteProject": "@{p0} invites you to join the project \"{p1}\".",
    "label.accept": "Accept",
    "label.accept.message": "Join the team successfully.",
    "label.deny": "Refuse",
    "label.deny.message": "Are you sure you want to refuse the invitation to join the team?",
    "label.deny.message.success": "Refused",
    "label.rejected": "Refused",
    "label.accepted": "Accepted",
    "mergeRequest.created.legacy": "Merge Request #{mergeRequestId} requires review",
    "mergeRequest.approved.legacy": "Merge Request #{mergeRequestId} is successfully merged",
    "mergeRequest.rejected.legacy": "Merge Request #{mergeRequestId} is closed",
    "mergeRequest.created": "Project {projectName} merge request: #{mergeRequestId} needs to be reviewed.",
    "mergeRequest.approved": "Project {projectName} merge request #{mergeRequestId} is approved. Contents from {sourceBranchName} have been successfully merged into {targetBranchName}.",
    "mergeRequest.rejected": "Project {projectName} merge request #{mergeRequestId} has been rejected. This merge request is closed.",
    "mergeRequest.review": "View",
    "userCreditGrantApplication.type.G2.approved": "Você ganhou $50 de crédito por enviar uma revisão no G2!",
    "userCreditGrantApplication.type.X.approved": "Você ganhou $10 de crédito por postar uma revisão no X(Twitter)!",
    "userCreditGrantApplication.rejected": "Crédito aprovado. — Não foi possível aprovar seu pedido de crédito, pois a submissão da revisão em {type} não atendeu aos requisitos. Se você tiver alguma dúvida ou precisar de ajuda, entre em contato conosco por e-mail."
  },
  "notification": {
    "view": "View",
    "testScenario": "Test Scenario",
    "scheduledTask": "Scheduled task",
    "api.created.title": "API Created Notice",
    "branch.title.sprint.branch": "Sprint Branch: ",
    "branch.title.api.version": "API Version: ",
    "api.created.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nAPI: {name}  \nAPI Path: {path}  \nStatus: {status}  \nMaintainer: {responsibleName}  \n  \nCreated by: {username}  \nCreated at: {operateTime}",
    "api.batchCreated.title": "APIs Multiple Created Notice",
    "api.batchCreated.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nAPIs: {name}  \n  \nCreated by: {username}  \nCreated at: {operateTime}",
    "api.updated.title": "API Updated Notice",
    "api.updated.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nAPI: {name}  \nAPI Path: {path}  \nStatus: {status}  \nMaintainer: {responsibleName}  \n  \nUpdated by: {username}  \nUpdated at: {operateTime}",
    "api.batchUpdated.title": "APIs Multiple Updated Notice",
    "api.batchUpdated.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nAPIs: {name}  \n  \nUpdated by: {username}  \nUpdated at: {operateTime}",
    "api.deleted.title": "API Deleted Notice",
    "api.deleted.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nAPI: {name}  \nAPI Path: {path}  \nStatus: {status}  \nMaintainer: {responsibleName}  \n  \nDeleted by: {username}  \nDeleted at: {operateTime}",
    "api.batchDeleted.title": "APIs Multiple Deleted Notice",
    "api.batchDeleted.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nAPIs: {name}  \n  \nDeleted by: {username}  \nDeleted at: {operateTime}",
    "dataSchema.created.title": "Schema Created Notice",
    "dataSchema.created.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nSchema: {name}  \n  \nCreated by: {username}  \nCreated at: {operateTime}",
    "dataSchema.batchCreated.title": "Schemas Multiple Created Notice",
    "dataSchema.batchCreated.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nSchemas: {name}  \n  \nCreated by: {username}  \nCreated at: {operateTime}",
    "dataSchema.updated.title": "Schema Updated Notice",
    "dataSchema.updated.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nSchema: {name}  \n  \nUpdated by: {username}  \nUpdated at: {operateTime}",
    "dataSchema.deleted.title": "Schema Deleted Notice",
    "dataSchema.deleted.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nSchema: {name}  \n  \nDeleted by: {username}  \nDeleted at: {operateTime}",
    "dataSchema.batchDeleted.title": "Schemas Multiple Deleted Notice",
    "dataSchema.batchDeleted.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nSchemas: {name}  \n  \nDeleted by: {username}  \nDeleted at: {operateTime}",
    "doc.created.title": "Document Created Notice",
    "doc.created.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nDocument: {name}  \n  \nCreated by: {username}  \nCreated at: {operateTime}",
    "doc.batchCreated.title": "Documents Multiple Created Notice",
    "doc.batchCreated.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nDocuments: {name}  \n  \nCreated by: {username}  \nCreated at: {operateTime}",
    "doc.updated.title": "Document Updated Notice",
    "doc.updated.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nDocument: {name}  \n  \nUpdated by: {username}  \nUpdated at: {operateTime}",
    "doc.deleted.title": "Document Deleted Notice",
    "doc.deleted.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nDocument: {name}  \n  \nDeleted by: {username}  \nDeleted at: {operateTime}",
    "doc.batchDeleted.title": "Documents Multiple Deleted Notice",
    "doc.batchDeleted.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nDocuments: {name}  \n  \nDeleted by: {username}  \nDeleted at: {operateTime}",
    "dataImport.completed.title": "Manual Import Data Notice",
    "dataImport.completed.content": "Team: {teamName}  \nProject: {projectName}  \nImported by: {username}  \n  \n- APIs/Docs: {apiCreatedCount} created, {apiUpdatedCount} updated;  \n- Environments: {environmentCreatedCount} created, {environmentUpdatedCount} updated;  \n- Schemas: {dataSchemaCreatedCount} created, {dataSchemaUpdatedCount} updated;  \n- Test Scenario: {testCaseCreatedCount} created, {testCaseUpdatedCount} updated;",
    "automatedDataImport.completed.title": "Auto Sync Data Notice",
    "automatedDataImport.completed.content": "Team: {teamName}  \nProject: {projectName}  \nImported by: {username}  \n  \n- APIs/Docs: {apiCreatedCount} created, {apiUpdatedCount} updated;  \n- Environments: {environmentCreatedCount} created, {environmentUpdatedCount} updated;  \n- Schemas: {dataSchemaCreatedCount} created, {dataSchemaUpdatedCount} updated;  \n- Test Scenario: {testCaseCreatedCount} created, {testCaseUpdatedCount} updated;",
    "testCase.completed.subject": "\"{name}\" Test Completed.",
    "testCase.completed.title": "Test Completed",
    "testCase.completed.content": "**Test Scenario: {name}**  \n- Team: {teamName}  \n- Project: {projectName}  \n- Branch/Version: {branchName}",
    "testTask.completed.subject": "\"{name}\" Scheduled task completed.",
    "testTask.completed.title": "Scheduled task completed",
    "testTask.completed.content": "**Scheduled task: {name}**  \n- Team: {teamName}  \n- Project: {projectName}  \n- Branch/Version: {branchName}",
    "testSuite.completed.title": "Test Completed",
    "testSuite.completed.content": "**TestSuite: {name}**  \n- Team: {teamName}  \n- Project: {projectName}  \n- Branch/Version: {branchName}",
    "testCaseCi.completed.subject": "\"{name}\" Test CI/CD Completed",
    "testCaseCi.completed.title": "Test CI/CD Completed",
    "testCaseCi.completed.content": "**Test Scenario: {name}**  \n- Team: {teamName}  \n- Project: {projectName}  \n- Branch/Version: {branchName}",
    "test.completed.content.username": "- Tester: {username}",
    "test.completed.content.started": "- Tested at: {started}",
    "test.completed.content.environment": "- Environment: {environmentName}",
    "test.completed.content.runsOn": "- Runs on: {source}",
    "test.completed.content.source.client": "Client",
    "test.completed.content.source.cloud": "Cloud",
    "test.completed.content.source.runner": "Runner",
    "test.completed.content.source.cli": "CLI",
    "test.completed.content.timings": "- Average Request Time: {responseAverage} ms \n- Request Time: {requestTime} s \n- Total Duration: {totalTimeConsume} s",
    "test.completed.content.statistics": "**Test Result**  \n- Total: {total}  \n- Passed: {passed}  \n- Failed: {failed}  \n- Untested: {untested}  \n- Passing Rate: {passingRate}%",
    "content.tooLongTip": "Note: Limited by {service}, the full content cannot be displayed. Please go to {appName} for details.",
    "response.component.created.title": "Response Created Notice",
    "response.component.created.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nResponse: {name}  \n  \nCreator: {username}  \nCreated at: {operateTime}",
    "response.component.updated.title": "Response Updated Notice",
    "response.component.updated.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nResponse: {name}  \n  \nUpdated by: {username}  \nUpdated at: {operateTime}",
    "response.component.deleted.title": "Response Deleted Notice",
    "response.component.deleted.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nResponse: {name}  \n  \nDeleted by: {username}  \nDeleted at: {operateTime}",
    "response.component.batchCreated.title": "Responses Multiple Created Notice",
    "response.component.batchCreated.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nResponses: {name}  \n  \nCreated by: {username}  \nCreated at: {operateTime}",
    "response.component.batchDeleted.title": "Responses Multiple Updated Notice",
    "response.component.batchDeleted.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nResponses: {name}  \n  \nUpdated by: {username}  \nUpdated at: {operateTime}",
    "securityScheme.component.created.title": "Security Scheme Created Notice",
    "securityScheme.component.created.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nSecurity scheme: {name}  \n  \nCreator: {username}  \nCreated at: {operateTime}",
    "securityScheme.component.updated.title": "Security Scheme Updated Notice",
    "securityScheme.component.updated.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nSecurity scheme: {name}  \n  \nUpdated by: {username}  \nUpdated at: {operateTime}",
    "securityScheme.component.deleted.title": "Security Scheme Deleted Notice",
    "securityScheme.component.deleted.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nSecurity scheme: {name}  \n  \nDeleted by: {username}  \nDeleted at: {operateTime}",
    "securityScheme.component.batchCreated.title": "Security Schemes Multiple Created Notice",
    "securityScheme.component.batchCreated.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nSecurity schemes: {name}  \n  \nCreated by: {username}  \nCreated at: {operateTime}",
    "securityScheme.component.batchDeleted.title": "Security Schemes Multiple Deleted Notice",
    "securityScheme.component.batchDeleted.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \nnSecurity schemes: {name}  \n  \nUpdated by: {username}  \nUpdated at: {operateTime}",
    "sprint.branch.created.title": "Create Sprint Branch",
    "sprint.branch.created.content": "Team: {teamName}  \nProject: {projectName}  \nSprintBranch: {name}  \n  \nCreator: {username}  \nCreated at: {operateTime}",
    "sprint.branch.archived.title": "Archive Sprint Branch",
    "sprint.branch.archived.content": "Team: {teamName}  \nProject: {projectName}  \nSprintBranch: {name}  \n  \nUpdated by: {username}  \nUpdated at: {operateTime}",
    "sprint.branch.retrieved.title": "Retrieve Sprint Branch",
    "sprint.branch.retrieved.content": "Team: {teamName}  \nProject: {projectName}  \nSprintBranch: {name}  \n  \nUpdated by: {username}  \nUpdated at: {operateTime}",
    "sprint.branch.deleted.title": "Delete Sprint Branch",
    "sprint.branch.deleted.content": "Team: {teamName}  \nProject: {projectName}  \nSprintBranch: {name}  \n  \nDeleted by: {username}  \nDeleted at: {operateTime}",
    "sprint.branch.merged.title": "Merge Sprint Branch Into Master",
    "sprint.branch.merged.content": "Merge Sprint Branch: {name}  \nTeam: {teamName}  \nProject: {projectName}  \n  \nUpdated by: {username}  \nUpdated at: {operateTime}   \n  \n- APIs/Docs: {apiCreateCount} created, {apiUpdateCount} updated; \n- Schemas: {dataSchemaCreateCount} created, {dataSchemaUpdateCount} updated; \n- Responses: {responseComponentCreateCount} created, {responseComponentUpdateCount} updated;",
    "api.version.created.title": "Create API Version",
    "api.version.created.content": "Team: {teamName}  \nProject: {projectName}  \nAPI Version: {name}  \n  \nCreator: {username}  \nCreated at: {operateTime}",
    "api.version.deleted.title": "Delete API Version",
    "api.version.deleted.content": "Team: {teamName}  \nProject: {projectName}  \nAPI Version: {name}  \n  \nDeleted by: {username}  \nDeleted at: {operateTime}",
    "comment.created.subject": "@{username} left a new comment in {projectName}:\"{resourceType}-{name}\".",
    "comment.created.title": "New Comment",
    "comment.created.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \n{resourceType}: {name}  \n  \nCreator: {username}  \nCreated at: {operateTime}",
    "comment.replied.subject": "@{username} replied to you in {projectName}:\"{resourceType}-{name}\".",
    "comment.replied.title": "New Reply",
    "comment.replied.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \n{resourceType}: {name}  \n  \nCreator: {username}  \nCreated at: {operateTime}",
    "comment.mentioned.subject": "@{username} mentioned you in {projectName}:\"{resourceType}-{name}\".",
    "comment.mentioned.title": "New Mention",
    "comment.mentioned.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \n{resourceType}: {name}  \n  \nCreator: {username}  \nCreated at: {operateTime}",
    "comment.resolved.subject": "@{username} resolved a comment in {projectName}:\"{resourceType}-{name}\".",
    "comment.resolved.title": "Comment has been resolved",
    "comment.resolved.content": "Team: {teamName}  \nProject: {projectName}  \nBranch/Version: {branchName}  \n{resourceType}: {name}  \n  \nCreator: {username}  \nCreated at: {operateTime}"
  },
  "nps": {
    "feedback.survey.v1.title": "How likely are you to recommend {appName} to a friend or colleague?",
    "feedback.survey.v1.feedback": "Where do you want us to improve? (Optional)"
  },
  "organization": {
    "operation.transfer": "{p0} becomes organization owner of {p1}",
    "operation.dismiss": "{p0} has disbanded organization {p1}",
    "operation.event.title": "Organization Activity"
  },
  "payment": {
    "pricing.price.free.title": "Start designing, developing, and testing APIs.",
    "pricing.price.basic.title": "Team up with your colleagues around your APIs.",
    "pricing.price.professional.title": "Collaborate with your team to design, develop, and test APIs faster.",
    "pricing.price.on-premises.title": "Deploy and manage your APIs on your own infrastructure for full control over security.",
    "pricing.price.on-premises.title.with-link": "Deploy and manage your APIs on your own infrastructure for full control over security. <a class='ui-link' href='{link}' target='_blank'>Learn more.</a>",
    "pricing.price.enterprise.title": "Manage, organize, and accelerate API-first development at scale.",
    "pricing.price.feature.title": "Everything in {plan}, plus:",
    "pricing.user.limit": "All core features and collaboration for up to {limit} users.",
    "pricing.user.limit.above": "Full suite of core tools and collaboration features for over {limit} enterprise users",
    "pricing.price.feature.image": "Image embedding up to {value}",
    "pricing.price.feature.reports": "Test reports storage (online) up to {value}",
    "pricing.price.feature.collection-runs": "Execuções de coleção ilimitadas",
    "pricing.price.feature.test-scenario": "Support import endpoint from other project as test scenario steps",
    "pricing.price.free.feature.design": "API design",
    "pricing.price.free.feature.debugging": "API debugging",
    "pricing.price.free.feature.testing": "API testing",
    "pricing.price.free.feature.doc": "API documentations",
    "pricing.price.free.feature.mock": "API mocking",
    "pricing.price.free.feature.recovery": "API recovery for 7 days",
    "pricing.price.free.feature.history": "API change history for 7 days",
    "pricing.price.free.feature.collaborators": "Up to 4 collaborators",
    "pricing.price.free.feature.runners": "Total run steps for scheduled tasks: 10K / month",
    "pricing.price.free.feature.runners.task.interval": "Scheduled task execution frequency: every 6 hours",
    "pricing.price.free.feature.runner.mock": "Self-hosted mock server: 100k calls / month",
    "pricing.price.free.feature.comments": "API comment: 1 comment / resource",
    "pricing.price.basic.feature.collaboration": "Unlimited collaboration for plan members",
    "pricing.price.basic.feature.domains": "3 Custom domains",
    "pricing.price.basic.feature.image": "Image embedding up to 500M",
    "pricing.price.basic.feature.reports": "Test reports storage (online) up to 500M",
    "pricing.price.basic.feature.recovery": "API recovery for 30 days",
    "pricing.price.basic.feature.history": "API change history for 90 days",
    "pricing.price.basic.feature.database": "Supports ClickHouse, MongoDB, Redis database",
    "pricing.price.basic.feature.comments": "API comment: 1 comment / resource",
    "pricing.price.professional.feature.collaboration": "Unlimited collaboration for plan members",
    "pricing.price.professional.feature.domains": "10 Custom domains",
    "pricing.price.professional.feature.image": "Image embedding up to 1G",
    "pricing.price.professional.feature.reports": "Test reports storage (online) up to 1G",
    "pricing.price.professional.feature.runner": "Total run steps for scheduled tasks: 10M / month",
    "pricing.price.professional.feature.runner.mock": "Self-hosted mock server: 10M calls / month",
    "pricing.price.professional.feature.comments": "Unlimited API Comments",
    "pricing.price.professional.feature.recovery": "API recovery for 60 days",
    "pricing.price.professional.feature.history": "API change history unlimited",
    "pricing.price.professional.feature.testScenarioHistory": "Test scenario change history: 180 days",
    "pricing.price.enterprise.feature.image": "Image embedding up to 2GB",
    "pricing.price.enterprise.feature.reports": "Test reports storage (online) up to 2GB",
    "pricing.price.enterprise.feature.sso": "SSO supports identity providers (IdPs) that compatible with the SAML 2.0 protocol, such as Microsoft Entra ID (formerly Azure Active Directory)",
    "pricing.price.enterprise.feature.runner": "Unlimited run steps for scheduled tasks",
    "pricing.price.enterprise.feature.runner.mock": "Unlimited calls for self-hosted mock server",
    "pricing.price.enterprise.feature.comments": "Unlimited API Comments",
    "pricing.price.enterprise.feature.mutip-docs-site": "Suporta a publicação de vários Sites de Documentação com a opção de selecionar o intervalo de publicação.",
    "pricing.price.enterprise.feature.rbac": "Customize project role permissions",
    "pricing.price.enterprise.feature.testScenariosAssociation": "Visualization of Endpoints/cases and Test Scenarios Association",
    "pricing.price.enterprise.feature.testScenarioCoverage": "Endpoint case and test scenario coverage statistics",
    "pricing.price.enterprise.feature.testScenarioHistory": "Test scenario change history: 365 days",
    "plan.feature.tooling.title": "Core Features to Design, Develop, and Test APIs",
    "plan.feature.tooling.item.client": "API client",
    "plan.feature.tooling.item.builder": "API builder",
    "plan.feature.tooling.item.testing": "API testing",
    "plan.feature.tooling.item.databases": "Connect to databases",
    "plan.feature.tooling.item.idea": "IDEA plugin",
    "plan.feature.tooling.item.response": "Response validation engine",
    "plan.feature.tooling.item.mock": "Smart mock server",
    "plan.feature.tooling.item.cloud-mock": "Cloud mock server",
    "plan.feature.tooling.item.local-mock": "Local mock server",
    "plan.feature.tooling.item.self-host-mock": "Self-host mock server",
    "plan.feature.tooling.item.collection-runs": "Collection runs",
    "plan.feature.tooling.item.database.sql": "SQL database",
    "plan.feature.tooling.item.database.sql.tips": "MySQL, SQL Server, Oracle, PostgreSQL",
    "plan.feature.tooling.item.database.noSql": "NoSQL database",
    "plan.feature.tooling.item.database.noSql.tips": "ClickHouse, MongoDB, Redis, etc.",
    "plan.feature.tooling.item.public": "Public API documentation",
    "plan.feature.tooling.item.private": "Private API documentation",
    "plan.feature.tooling.item.domains": "Custom domains",
    "plan.feature.tooling.item.runnerImport": "Scheduled import via runner",
    "plan.feature.tooling.item.runnerTask": "Scheduled tasks via runner",
    "plan.feature.tooling.item.runnerTask.interval": "Scheduled task execution frequency",
    "plan.feature.tooling.item.recover": "Recover deleted APIs",
    "plan.feature.tooling.item.apiHistory": "API change history",
    "plan.feature.tooling.item.hidePoweredBy": "Hide 'Powered by {appName}'",
    "plan.feature.tooling.item.hideRunIn": "Hide 'Run in {appName}' Button",
    "plan.feature.tooling.item.singleSignOn": "SSO (SAML)",
    "plan.feature.tooling.item.singleSignOn.tips": "SSO supports identity providers (IdPs) that compatible with the SAML 2.0 protocol, such as Microsoft Entra ID (formerly Azure Active Directory)",
    "plan.feature.tooling.item.privateApiHub": "Private API Hub",
    "plan.feature.tooling.item.audit-logs": "Audit Logs",
    "plan.feature.tooling.item.privateMockServer": "Private mock server",
    "plan.feature.tooling.item.prioritySupport": "Priority support",
    "plan.feature.tooling.item.multiple-docs-sites": "Suporta a publicação de vários Sites de Documentação",
    "plan.feature.tooling.item.sub-sites-support": "Os sub-sites suportam a definição do âmbito de publicação",
    "plan.feature.tooling.item.desktop": "Mac, Windows, Web and Linux apps",
    "plan.feature.tooling.item.testScenarioHistory": "Test scenario change history",
    "plan.feature.tooling.item.comments": "API comment",
    "plan.feature.tooling.item.teamVariables": "Team-level shared variables",
    "1commentPerResource": "1 comment / resource",
    "unlimited": "Unlimited",
    "10KStepsPreMonth": "10K run steps/month",
    "1MStepsPreMonth": "1M run steps/month",
    "10MStepsPreMonth": "10M run steps/month",
    "every6hours": "every 6 hours",
    "everyMinute": "every 1 minute",
    "7days": "7 days",
    "30days": "30 days",
    "60days": "60 days",
    "90days": "90 days",
    "180days": "180 days",
    "365days": "365 days",
    "perHours": "Every {value} hours",
    "perMinutes": "Every {value} minutes",
    "plan.feature.collaboration.title": "API Collaboration",
    "plan.feature.collaboration.item.control": "Role-based access control",
    "plan.feature.collaboration.item.scheduled-import-frequency": "Scheduled import frequency",
    "plan.feature.collaboration.item.projects": "Team projects",
    "plan.feature.collaboration.item.members": "Team members",
    "plan.feature.collaboration.item.activities": "Team activities",
    "plan.feature.collaboration.item.Image": "Image embedding",
    "plan.feature.collaboration.item.reports": "Test reports storage (online)",
    "plan.feature.tooling.item.recover.tips": "You can restore deleted items from the trash, including interface documents, test cases, data models, etc.",
    "plan.feature.tooling.item.apiHistory.tips": "The API change history keeps track of changes. You can easily revert to your previous modification history.",
    "subscription.invoice.coming.email.subject": "Will charge you for {appName} {plan} in 7 days",
    "plan.metadata.title": "Choose Your Team Plan",
    "plan.metadata.subtitle": "Welcome to {appName}, the ultimate API tool. Try it free for 14 days, and cancel anytime you like!",
    "pricing.price.feature.single.sprint.branch.per.project": "1 Sprint Branch per project",
    "pricing.price.feature.sprint.branches.count.per.project": "{count} Sprint Branches per project",
    "pricing.price.feature.sprint.branches.unlimited": "Unlimited Sprint Branches",
    "plan.feature.collaboration.item.sprint.branches": "Sprint Branches",
    "plan.sprint.branches.count.per.project": "{count} branch / project",
    "subscription.update.payment.info.email.subject": "Reminder: Payment Failure for {appName} {plan} Subscription",
    "one-time.subscription.will-end.email.subject": "Your Team {teamName} {planName} Plan of {appName} Ending Soon",
    "one-time.subscription.ended.email.subject": "Reminder: Your Team {teamName} {planName} Plan of Apidog has Ended",
    "plan.type.enterprise": "Enterprise",
    "plan.type.on-premises": "On-premises",
    "plan.type.basic": "Basic",
    "plan.type.professional": "Professional",
    "plan.type.free": "Free",
    "pricing.price.professional.feature.teams": "Suitable for multi-person teams",
    "pricing.price.basic.feature.teams": "Suitable for small teams",
    "pricing.price.professional.feature.TeamActivities": "Team activities",
    "pricing.price.enterprise.feature.teams": "Suitable for multi-person teams",
    "pricing.price.professional.feature.branches": "Unlimited sprint branches",
    "pricing.price.professional.feature.database": "Supports Dameng database",
    "pricing.price.professional.feature.dataSchemaReference": "Schema reference visualization",
    "pricing.price.professional.feature.runner.cn": "Total run steps for scheduled tasks: 10M / month",
    "pricing.price.professional.feature.runner.mock.cn": "Self-hosted mock server: 10M calls / month",
    "pricing.price.professional.feature.HidingTheLogo": "Support Hiding 'Run in {appName}' Button in API Documentation",
    "price.discount.50%": "50% off",
    "price.discount.20%": "20% off",
    "pricing.price.feature.domains": "{count} Custom domains",
    "pricing.price.feature.domains.unlimited": "Unlimited custom domains",
    "pricing.price.feature.projects": "{count} projects",
    "pricing.price.feature.recovery": "API recovery for {count} days",
    "pricing.price.feature.history": "API change history for {count} days",
    "pricing.price.feature.on-premises.recovery": "API recovery for 365 days",
    "pricing.price.feature.on-premises.runner": "Unlimited run steps for scheduled tasks",
    "pricing.price.feature.on-premises.runner.mock": "Unlimited calls for self-hosted mock server",
    "pricing.price.feature.on-premises.image": "Unlimited image embedding",
    "pricing.price.feature.on-premises.reports": "Unlimited test reports storage (online) ",
    "pricing.price.feature.on-premises.sso": "Single sign-on support identity providers (IdPs) that compatible with the SAML 2.0 protocol, such as Microsoft Entra ID (formerly Azure Active Directory, Azure AD)",
    "pricing.price.feature.on-premises.ldap": "Supports LDAP, OKTA, OAuth 2.0, and OIDC",
    "pricing.price.feature.history.unlimited": "Unlimited API change history",
    "pricing.price.feature.runner": "Total run steps for scheduled tasks: 10K / month",
    "pricing.price.feature.recovery.unlimited": "Unlimited API recovery",
    "pricing.price.feature.on-premises.p-mock": "Private Cloud Mock Service",
    "pricing.price.feature.on-premises.p-apihub": "Private API Hub",
    "custom": "Custom",
    "on-premises": "On-premises",
    "plan.feature.core": "Key Features of {appName}",
    "pricing.price.basic.sprint-branches": "5 Sprint Branches per project",
    "pricing.price.basic.runner.mock": "Self-hosted mock server: 1M calls / month",
    "pricing.price.basic.redis": "Support Redis database",
    "pricing.price.basic.feature.runner": "Total run steps for scheduled tasks: 1M / month",
    "pricing.price.basic.feature.runner.task.interval": "Scheduled task execution frequency: every 1 minute",
    "pricing.price.basic.feature.runner.mock": "Self-hosted mock server: 1M calls / month",
    "pricing.price.basic.team-activities": "Team activities",
    "pricing.price.scheduled-import": "Scheduled import frequency: every {value} minutes",
    "pricing.price.scheduled-import.hours": "Scheduled import frequency: every {value} hours",
    "requests.per.month": "{count} requests / month",
    "calls.per.month": "{count} calls / month",
    "per.seat": "{price}/seat/{interval}",
    "month": "month",
    "year": "year",
    "Contact the corporate consultant": "Contact the corporate consultant",
    "learnMore": "Learn more",
    "upgrade": "Upgrade",
    "trialWillEndAtXDays": "The {p0} plan for {p1} will stay accessible until {p2}. ",
    "trialExpired": "The {p0} plan for {p1} has expired. ",
    "subscriptionWillEndAtXDays": "The {p0} plan purchased by team {p1} is about to expire.",
    "subscriptionWillEndAtXDays.organization": "The {p0} plan purchased by organization {p1} is about to expire.",
    "upgradeSuccess": "Team {p0} has purchased the {p1} plan. ",
    "upgradeSuccess.organization": "Organization {p0} has purchased the {p1} plan. ",
    "subscriptionEnd": "The {p0} plan purchased by team {p1} has expired.",
    "subscriptionEnd.organization": "The {p0} plan purchased by organization {p1} has expired.",
    "orderPaymentReviewFailed": "The order for the {p0} plan purchased by team {p1} has not passed the review. Please go to the Plans tab to verify the transaction number, or initiate a new order.",
    "orderPaymentReviewFailed.organization": "The order for the {p0} plan purchased by organization {p1} has not passed the review. Please go to the Plans tab to verify the transaction number, or initiate a new order.",
    "type.enterprise": "Enterprise",
    "type.basic": "Basic",
    "type.professional": "Professional",
    "message.error.exited-subscription": "Your team has already subscribed the {plan} plan. You need to cancel the subscription first before you can change the payment mode. The new order will start after the previous invoice ends.",
    "pricing.price.feature.single.api.version.per.project": "1 API Version per project",
    "pricing.price.feature.api.versions.count.per.project": "{count} API Versions per project",
    "pricing.price.feature.api.versions.unlimited": "Unlimited API Versions",
    "plan.feature.collaboration.item.api.versions": "API Versions",
    "plan.api.versions.count.per.project": "{count} / project"
  },
  "project": {
    "server.default": "Servidor Padrão",
    "rpcServer.default": "Servidor Padrão",
    "setting.default.template.id.description": "ID",
    "setting.default.template.category.description": "group",
    "setting.default.template.name.description": "name",
    "setting.default.template.tags.description": "tag",
    "setting.default.template.status.description": "status",
    "sample.team.name": "Personal Team",
    "sample.project.name": "My Project"
  },
  "rbac": {
    "branchManagement": "Branch Management",
    "printBranches": "Sprint Branches",
    "merge": "Merge",
    "apiVersions": "API Versions",
    "readSwitch": "Read, Switch",
    "apiManagement": "API Management",
    "apiEndpoints": "API Endpoints",
    "icecwwcarr": "Including Endpoint cases, MD, WS, custom API, and related resources.",
    "readRun": "Read, Run",
    "readRef": "Read, Reference",
    "createUpdateDelete": "Create, Update, Delete",
    "generateCode": "Generate Code",
    "createUpdateDeleteEndpointCase": "Create, Update, Delete Endpoint Case",
    "schema": "Schema",
    "component": "Component",
    "request": "Request",
    "update": "Update",
    "trash": "Trash",
    "read": "Read",
    "restore": "Restore",
    "tests": "Tests",
    "testScenario": "Test Scenario",
    "readEditLocal": "Read, Edit Current Values",
    "readRunFunctionalTests": "Read, Run Functional Tests",
    "runPerformanceTests": "Run Performance Tests",
    "runOnOtherTools": "Run on Other Tools",
    "scheduledTasks": "Scheduled Tasks",
    "forceDelete": "Permanently delete",
    "readRunImmediately": "Read, Run Immediately",
    "testReports": "Test Reports",
    "delete": "Delete",
    "environmentManagement": "Environment Management",
    "globalVariables": "Global Variables",
    "globalParams": "Global Params",
    "environments": "Environments",
    "shareDocs": "Share Docs",
    "publishDocs": "Publish Docs",
    "history": "History",
    "readPreview": "Read, Preview",
    "publish": "Publish",
    "summypbp": "Including publish, basic settings, layouts.",
    "settings": "Settings",
    "basicSettings": "Basic Settings",
    "cloneProject": "Clone Project",
    "members": "Members",
    "inviteManageMembers": "Only admins can invite/manage members.",
    "memberRoleSetupRemove": "Member Role Setup/Remove",
    "endpointFeatureSettings": "Endpoint Feature Settings",
    "iefsrvsmas": "Including Endpoint Feature Settings, Response Validation Settings, Mock Settings, Advanced Settings.",
    "notificationTargets": "Notification Targets",
    "notificationEvents": "Notification Events",
    "commonParameters": "Common Parameters",
    "publicScripts": "Public Scripts",
    "createUpdateDeleteArchivist": "Create, Update, Delete, Archive, Restore",
    "setBranchProtection": "Protect",
    "databaseConnections": "Database Connections",
    "gitConnections": "Git Connections",
    "socketPacketScripts": "Socket Packet Scripts (Socket)",
    "importData": "Import Data",
    "importManual": "Manually Import",
    "scheduledImportManualTrigger": "Scheduled Import Manual Trigger",
    "scheduledImportSettings": "Scheduled Import Settings",
    "exportData": "Export Data",
    "requestHistory": "Request History",
    "localRequestHistory": "Local Request History",
    "sharedRequestHistory": "Shared Request History",
    "share": "Share",
    "quickShare": "Quick Share",
    "add": "Add",
    "roleTypeNone": "Forbidden",
    "roleTypeAdmin": "Admin",
    "roleTypeMaintainer": "Editor",
    "roleTypeReadOnly": "Read-only",
    "vaultSecrets": "Vault Secrets",
    "readCreateUpdateDelete": "Read, Create, Update, Delete",
    "mergeRequest": "Read, Create Merge Requests",
    "protectedBranchResourcesCdu": "Create, Update, Delete, Merge Protected Branch Resources"
  },
  "recycle": {
    "expire": "File expire",
    "restore.success": "Restore Success",
    "restore.fail": "Restore Fail",
    "restore.fail.resource.deleted": "This resource has been permanently deleted and cannot be restored.",
    "httpApi.deleted": "The owning API does not exist",
    "socketService.deleted": "The owning Socket Service does not exist",
    "socketApi.deleted": "The owning Socket API does not exist",
    "folder.deleted": "The parent Folder was deleted and the files are restored to the root directory"
  },
  "resourceUsage": {
    "usage.reach90.notice.title": "Less than 10% usage remaining",
    "usage.reached.notice.title": "Usage limit reached",
    "usage.reach90.mail.title": "Usage Limit Notification",
    "usage.reach100.mail.title": "Usage Limit Reached Notification",
    "testScheduledTask": "scheduled tasks",
    "selfHostedMock": "self-hosted mock calls"
  },
  "samlSso": {
    "organizationNotFound": "Organization {orgName} is not found",
    "configNotConfigured": "This organization has not yet configured SSO.",
    "noIdentityInformation": "The identity provider returned no identity information",
    "unableToLinkIdentity": "Unable to Link Identity",
    "unableToLinkIdentityContent": "You are attempting to authenticate with your Identity Provider using the {nameId} SAML identity which is already linked to a different {appName} user account in the organization. Please reach out to one of your {appName} organization owners for assistance.",
    "domainDoesNotMatchMemberEmail": "The domain does not match any organization member's email.",
    "domainReserved": "Sorry, this domain is not allowed.",
    "login.memberNotFound": "You are attempting to authenticate with your Identity Provider using the {nameId} SAML identity which is already linked to a invalid {appName} user account in the organization. Please contact {appName} staff to resolve the issue.",
    "login.unableToLinkIdentity": "You are trying to bind the {nameId} SAML identity to an {appName} user account, but the {appName} user account is currently bound to another SAML identity. Please contact your {appName} organization owner for assistance."
  },
  "selfHostedMockCall": {
    "usage.reach90.detail": "Remaining usage for self-hosted mock calls is less than 10%.",
    "usage.reached.detail": "Usage Limit reached! Self-hosted mock calls will no longer be available."
  },
  "serverMock": {
    "error.notFound": "failed to reach: {method} {path}, Learn more at: {link}",
    "error.invalidBranch": "The sprint branch requested for Mock has not been found; it may have been archived or deleted, Learn more at: {link}",
    "error.invalidJson": "the response data from Mock is invalid JSON.",
    "error.conflictPath": "Current project including multiple APIs with the same method & path causes conflict: {method} {path}, please use ID mode to Mock data. Learn more at: {link}",
    "error.conflictPath.identityPattern": "Current project has multiple API with the same method & path {method} {path} and the same {type} param as API Identification is {fieldKey} causing the conflict of Mock Server. Please use ID mode to Mock data. Learn more at {link}",
    "error.customScriptError": "error occurred in custom script (Advanced Mock), error message: ",
    "error.notEnable": "Cloud Mocking is not enable in this project, you can enable it in project setting. Learn more at: {link}",
    "error.noToken": "This project Cloud Mocking was enabled with Token authentication, your query parameter should carry the token. Learn more at: {link}",
    "error.invalidToken": "There is an error in Cloud Mocking authenticate Token, please check. Learn more at: {link}"
  },
  "team": {
    "operation.transfer": "{p0} becomes team owner of {p1}",
    "operation.dismiss": "{p0} has disbanded team {p1}",
    "operation.becomes.admin": "{p0} becomes team admin of {p1}",
    "operation.event.title": "Team Activity"
  },
  "testScheduleTask": {
    "execution.completed": "\"{taskName}\" Scheduled task completed.",
    "usage.reach90.detail": "Remaining usage for scheduled task run steps is less than 10%.",
    "usage.reached.detail": "Usage Limit reached! Scheduled tasks will no longer run as planned."
  },
  "user": {
    "ldap.error.email_existed": "Este endereço de e-mail já está associado a outra conta LDAP.",
    "email.conflict": "Este endereço de e-mail já está cadastrado. Por favor, faça login.",
    "welcome.email.subject": "Welcome to {appName}",
    "emailToken.email.subject": "Login Code for {appName}: {token}",
    "emailVerify.email.subject": "Verification Code for {appName}: {token}",
    "sample.myWorkspace": "Personal Team",
    "sample.myProject": "My Project",
    "sample.environmentName": "Ambiente da Loja de Petstore",
    "account.error.exists": "Esta conta já existe. Por favor, escolha outra.",
    "resetPassword.email.subject": "Reset password instructions",
    "deleteAccount.email.subject": "Account deleted on {appName}",
    "authorization.expired": "A autorização expirou, faça login novamente.",
    "password.required": "Por favor, defina uma senha primeiro."
  },
  "webSocketApi": {
    "unnamed": "Unnamed"
  }
}